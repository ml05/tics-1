// Wifi
#include <SoftwareSerial.h>
const byte espRx = 3;
const byte espTx = 4;
SoftwareSerial SerialEsp(espRx, espTx);

// variables globales
 float humedad;
 float frecuencia;
 float caudal_L_m;
 float tempCext;
 float tempCint;
 float caudal_L_h;
 
// dependencias de OLED
#include <Wire.h> // definir
#include <Adafruit_GFX.h> // definir libreria grafica
#include <Adafruit_SSD1306.h> // definir libreria de OLED
#define ANCHO 128 // ancho de la pantalla
#define ALTO 64 // alto de la pantalla
#define OLED_RESET 4 // numero "aleatoreo" se usa solo para pantallas que tengan el boton
Adafruit_SSD1306 oled(ANCHO, ALTO, &Wire, OLED_RESET); // setear parametros para el oled

// dependencias DHT11
#include <DHT.h>
#define DHTPIN 4 // pin a DHT11
#define DHTTYPE DHT11 // definir tipo de modulo
DHT dht(DHTPIN, DHTTYPE); // enlaze pin y tipo

// dependencias LM35
#define VoltajeLM35    3300.0 // en milivolt
#define RangoAnalogo 1024.0 // rango pin analogo 0 a 1023 
#define PIN_LM35       A0 // pin a LM35
#define PIN_LM352       1 // pin a LM35

// LEDS
const int LEDOK = 7; // Led verde
const int LEDNOK = 6; // Led rojo

// dependencias del caudalimetro
volatile int NumPulsos; // variable para la cantidad de pulsos recibidos
int PinCaudalimetro = 2;    // Sensor conectado en el pin 2 analogo
float factor_conversion = 4.8; // para convertir de frecuencia a caudal (ver en el datasheet)
int IntervaloMedicion = 2500; // Tiempo con el que se calculara el consumo
float Volumen = 0; // Consumo en Litros
long dt = 0; // variacion de tiempo por loop
long t0 = 0; // millis () del loop anterior

// Funcion que se activa durante la interrupcion
void ContarPulsos ()
{ 
  NumPulsos++;  //incrementamos la variable de pulsos
} 

// Funcion para obtener la frecuencia
float ObtenerFrecuencia() 
{
  // Codigo Caudalimetro
  float frecuencia; // Declarar arreglo 0=Frecuencia 1=TemperaturaExterior 2=Humedad 3=TemperaturaInterior
  NumPulsos = 0;   // Reset a 0 el número de pulsos
  interrupts();    // Habilitar las interrupciones
  delay(2000);   // muestra de 2 segundo
  noInterrupts(); // Deshabilitar las interrupciones
  frecuencia = NumPulsos/2; // Hz(pulsos por segundo)

  return frecuencia;
}

// Funcion para obtener temperatura exterior
float ObtenerTemperaturaLM() 
{
  // codigo sensor LM35 temperatura exterior
  float ValorLM35 = analogRead(PIN_LM35); // rango del sensor
  float milliVolt = ValorLM35 * (VoltajeLM35 / RangoAnalogo);// convertir rango a voltaje
  int tempC = (milliVolt / 10);// convertir voltaje a C int para entero 

  return tempC;
}

// Funcion para obtener temperatura interior
float ObtenerTemperaturaLM2() 
{
  // codigo sensor LM35 temperatura interior
  float ValorLM35 = analogRead(PIN_LM352); // rango del sensor
  float milliVolt = ValorLM35 * (VoltajeLM35 / RangoAnalogo);// convertir rango a voltaje
  int tempC = (milliVolt / 10);// convertir voltaje a C int para entero 

  return tempC;
}


// Funcion impresion OLED
void pantalla(float tempCext, float tempCint, float humedad, float caudal_L_h, float Volumen)
{
   // Impresion en pantalla
  oled.clearDisplay();
  
  oled.setTextColor(WHITE);
  oled.setCursor(0,0);
  oled.setTextSize(1);
  oled.print("Temp. Ext:");
  oled.setCursor(65,0);
  oled.setTextSize(1);
  oled.print(tempCext);

  oled.setCursor(0,10);
  oled.setTextSize(1);
  oled.print("Temp. Int:");
  oled.setCursor(65,10);
  oled.setTextSize(1);
  oled.print(tempCint);

  oled.setCursor(0,20);
  oled.setTextSize(1);
  oled.print("Humedad (%):");
  oled.setCursor(72,20);
  oled.setTextSize(1);
  oled.print(humedad/100);

  oled.setCursor(0,30);
  oled.setTextSize(1);
  oled.print("Flujo (L/h):");
  oled.setCursor(72,30);
  oled.setTextSize(1);
  oled.print(caudal_L_h);

  oled.setCursor(0,40);
  oled.setTextSize(1);
  oled.print("Consumo (L):");
  oled.setCursor(0,50);
  oled.setTextSize(2);
  oled.print(Volumen);

  oled.display();
  delay(500);
  oled.clearDisplay();
}

// Funcion Inicializadora
void setup()
{ 
  Wire.begin(); // Iniciar libreria de OLED
  Serial.begin(115200);
  SerialEsp.begin(9600);
  dht.begin(); // Iniciar libreria sensor DHT11
  pinMode(PinCaudalimetro, INPUT); // Iniciar el Pin Analogo del caudalimetro como input
  attachInterrupt(0,ContarPulsos,RISING); //(Interrupcion 0(Pin2),funcion,Flanco de subida)
  t0 = millis();
  oled.begin(SSD1306_SWITCHCAPVCC, 0X3C); // Iniciar OLED (Tipo de alimentacion, ID de la pantalla)
  oled.clearDisplay();
} 

// "Main"
void loop ()    
{

  // Calculo caudalimetro
  frecuencia = ObtenerFrecuencia(); //obtener la Frecuencia de los pulsos en Hz
  caudal_L_m = frecuencia/factor_conversion; //calcular el caudal en Litros por minuto
  caudal_L_h = caudal_L_m*60; //calcular el caudal en Litros por hora
  dt = millis()-t0; // calcular variacion en el tiempo desde ultima medida
  t0 = millis(); // setear nuevo tiempo
  Volumen = Volumen + (caudal_L_m/60) * (dt/1000); // Volumen (Litros) = caudal * tiempo en segundos

  // LLamado a los datos
  tempCext = ObtenerTemperaturaLM();
  tempCint = ObtenerTemperaturaLM();

  
  // Parce Verificador de DHT11
  if (isnan(dht.readHumidity()))
  {
    humedad = humedad;
  } else
  {
    humedad = dht.readHumidity();
  }

  // LEDs de estado
  digitalWrite(LEDNOK, LOW); // defecto LED rojo OFF
    
  if(tempCint > 50) // Si temp supera apagar led verde
  {
    digitalWrite(LEDOK, LOW);
  } else
  {
    digitalWrite(LEDOK, HIGH);
  }

  if(tempCint > 50) // Si temp supera prender led rojo
  {
    digitalWrite(LEDNOK, HIGH);
  } else
  {
    digitalWrite(LEDNOK, LOW);
  }

  // Llamar a funcion imprimir
  pantalla(tempCext, tempCint, humedad, caudal_L_h, Volumen);

  // Impresion Caudal y consumo
  Serial.print ("Consumo: "); 
  Serial.print (Volumen); 
  Serial.print ("Litros\tCaudal: "); 
  Serial.print (caudal_L_m,3); 
  Serial.print (" L/m\t"); 
  Serial.print (caudal_L_h,3); 
  Serial.println ("L/h"); 

    // Impresion Temp Exterior
  Serial.print("Temperatura exterior: ");
  Serial.print(tempCext);   // Temperatura exterior
  Serial.println("°C");

  // Impresion Temp y Humedad interior
  Serial.print("Temperatura interior: ");
  Serial.print(tempCint + 2);
  Serial.print(" °C");
  Serial.print("   ~   ");
  Serial.print("Humedad: ");
  Serial.println(humedad);

}

void SendData(){
  // alarm_co_lpg_smole_temp     // char *  and split strtok 
  String s_tempCext = String(tempCext);
  String s_tempCint = String(tempCint);
  String s_humedad = String(humedad);
  String s_frecuencia = String(frecuencia);
  String s_caudal = String(caudal_L_h);
  String s_volumen = String(Volumen);
  SerialEsp.println(s_tempCext + "_" + s_tempCint + "_" + s_humedad + "_" + s_frecuencia + "_" + s_caudal + "_" + s_volumen);
  Serial.println(s_tempCext + "_" + s_tempCint + "_" + s_humedad + "_" + s_frecuencia + "_" + s_caudal + "_" + s_volumen);
}
