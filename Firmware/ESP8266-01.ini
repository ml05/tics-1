
#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>


#define SSID "Flowmetro"
#define PASS  "88888888"

const char* ssid     = SSID;
const char* password = PASS;

const char* host = "192.168.50.141"; // cmd -> ipconfig
const uint16_t port = 80;

const byte espRx = 5;
const byte espTx = 4;
SoftwareSerial SerialEsp(espRx, espTx); // RX, TX  Nodemcu => D1->5, D2->4

// RX msg
bool received = false;
String receivedMsg;

// variables to control
String s_tempCext;
String s_tempCint ;
String s_humedad ;
String s_frecuencia ;
String s_caudal ;
String s_volumen ;
const byte numVars = 6;
//              
String controlledVars[] = {s_tempCext, s_tempCint, s_humedad, s_frecuencia, s_caudal, s_volumen};

// variables float
String tempCext;
String tempCint;
String humedad;
String frecuencia;
String caudal_L_h;
String Volumen;


void setup() 
{
  Serial.begin(115000);
  SerialEsp.begin(9600);

  // We start by connecting to a WiFi network

  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  /* Explicitly set the ESP8266 to be a WiFi-client, otherwise, it by default,
     would try to act as both a client and an access-point and could cause
     network-issues with your other WiFi-devices on your WiFi-network. */
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
} // EOF setup

void loop()
{  
  checkSerialCom();
  if (received){
    ProcessMsg();
    receivedMsg = "";
    received = false;
    ConvertVariables();
    delay(50);
    // attempt to send data to host
    SendDataToHost(); 
  }

  //delay(300000); // execute once every 5 minutes
  delay(10000);
} // EOF loop


/************ Helper Functions **********************/
void checkSerialCom()
{
  char data;
  if (SerialEsp.available() > 0)
  { // Checks whether data is comming from the serial port
    while (SerialEsp.available() > 0)
    {
      data = (char)SerialEsp.read(); // Reads the data from the serial port
      receivedMsg += data;        // Para la segunda parte del v√≠deo
    }
    received = true;
  }
} // EOF checkSerialCom


void ProcessMsg(){
  receivedMsg.trim();
  Serial.println("Recibido: ");
  Serial.println(receivedMsg);
  int index;
  for (size_t i = 0; i < numVars; i++)
  {
    index = receivedMsg.indexOf('_');
    controlledVars[i] = receivedMsg.substring(0, index);
    receivedMsg = receivedMsg.substring(index + 1);
    // Serial.print("=> ");
    // Serial.println(controlledVars[i]);
  }
  tempCext = controlledVars[0];
  tempCint = controlledVars[1];
  humedad = controlledVars[2];
  frecuencia = controlledVars[3];
  caudal_L_h = controlledVars[4];
  Volumen = controlledVars[5];
} // EOF ProcessMsg


void ConvertVariables(){
  tempCext = s_tempCext.toInt();
  tempCint = s_tempCint.toInt();
  humedad = s_humedad.toInt();
  frecuencia = s_frecuencia.toInt();
  caudal_L_h = s_caudal.toInt(); 
  Volumen = s_volumen.toInt(); 
}// EOF ConvertVariables


void SendDataToHost(){
  Serial.print(">>>>>>> connecting to ");
  Serial.print(host);
  Serial.print(':');
  Serial.println(port);

  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  if (!client.connect(host, port)) {
    Serial.println("connection failed");
    delay(5000);
    return;
  }

  String query = "web-app/hola.php?tempext=";
  query += tempCext;
  query += "&tempint=";
  query += tempCint;
  query += "&humedad=";
  query += humedad;
  query += "&frec=";
  query += frecuencia;
  query += "&caudal=";
  query += caudal_L_h;
  query += "&consumo=";
  query += Volumen;
  
  Serial.println(query);

  Serial.println("[Sending a request]");
  client.print(String("GET /") + query + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n" +
               "\r\n"
              );

  // wait for data to be available
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      delay(3000);
      return;
    }
  }

  // Read all the lines of the reply from server
  Serial.println("receiving from remote server");
  String msg;
  while (client.available()) {
    char ch = static_cast<char>(client.read());
    Serial.print(ch); // print the reply
    msg += ch;
  }
  
  Serial.println();
  if (msg.indexOf("Guardado correcto!") != -1){
    Serial.println("Data Saved");
  }
  else{
    Serial.println("Could not save data");
  }

  // Close the connection
  Serial.println();
  Serial.println(">>>>>>>>>> closing connection");
  Serial.println();
  client.stop();
} // EOF SendDataToHOST
